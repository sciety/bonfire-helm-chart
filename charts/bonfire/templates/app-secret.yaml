{{- if not .Values.secrets.existingAppSecret -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "bonfire.fullname" . }}-secret
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-secret" (include "bonfire.fullname" .))) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}

  # set to existing secrets data or generate a random ones when not exists
  {{- $keyBase := (get $secretData "SECRET_KEY_BASE") | default (printf "%s%s%s" (uuidv4) (uuidv4) (uuidv4) | b64enc) }}
  SECRET_KEY_BASE: {{ $keyBase | quote }}
  {{- $signingSalt := (get $secretData "SIGNING_SALT") | default (printf "%s%s%s" (uuidv4) (uuidv4) (uuidv4) | b64enc) }}
  SIGNING_SALT: {{ $signingSalt | quote }}
  {{- $encryptionSalt := (get $secretData "ENCRYPTION_SALT") | default (printf "%s%s%s" (uuidv4) (uuidv4) (uuidv4) | b64enc) }}
  ENCRYPTION_SALT: {{ $encryptionSalt | quote }}
{{- end }}
